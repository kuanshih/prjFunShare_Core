// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace FunShare_Admin.Models
{
    public partial class FUNShareContext : DbContext
    {
        public FUNShareContext()
        {
        }

        public FUNShareContext(DbContextOptions<FUNShareContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Achievement> Achievement { get; set; }
        public virtual DbSet<AchievementList> AchievementList { get; set; }
        public virtual DbSet<AdvertiseOrder> AdvertiseOrder { get; set; }
        public virtual DbSet<AdvertiseProduct> AdvertiseProduct { get; set; }
        public virtual DbSet<AdvertiseProductDetail> AdvertiseProductDetail { get; set; }
        public virtual DbSet<Age> Age { get; set; }
        public virtual DbSet<Bonus> Bonus { get; set; }
        public virtual DbSet<Categories> Categories { get; set; }
        public virtual DbSet<City> City { get; set; }
        public virtual DbSet<Comment> Comment { get; set; }
        public virtual DbSet<CouponList> CouponList { get; set; }
        public virtual DbSet<CustomerInfomation> CustomerInfomation { get; set; }
        public virtual DbSet<District> District { get; set; }
        public virtual DbSet<Ecpay> Ecpay { get; set; }
        public virtual DbSet<ImageList> ImageList { get; set; }
        public virtual DbSet<Interest> Interest { get; set; }
        public virtual DbSet<IntervalList> IntervalList { get; set; }
        public virtual DbSet<LoginLog> LoginLog { get; set; }
        public virtual DbSet<MemberAchievement> MemberAchievement { get; set; }
        public virtual DbSet<MemberCoupon> MemberCoupon { get; set; }
        public virtual DbSet<Message> Message { get; set; }
        public virtual DbSet<Order> Order { get; set; }
        public virtual DbSet<OrderDetail> OrderDetail { get; set; }
        public virtual DbSet<PocketList> PocketList { get; set; }
        public virtual DbSet<Product> Product { get; set; }
        public virtual DbSet<ProductCategories> ProductCategories { get; set; }
        public virtual DbSet<ProductDetail> ProductDetail { get; set; }
        public virtual DbSet<Region> Region { get; set; }
        public virtual DbSet<Status> Status { get; set; }
        public virtual DbSet<SubCategory> SubCategory { get; set; }
        public virtual DbSet<Supplier> Supplier { get; set; }
        public virtual DbSet<Survey> Survey { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.UseCollation("Chinese_Taiwan_Stroke_CI_AS");

            modelBuilder.Entity<Achievement>(entity =>
            {
                entity.Property(e => e.AchievementId).HasColumnName("Achievement_ID");

                entity.Property(e => e.AchievementDescription)
                    .HasMaxLength(50)
                    .HasColumnName("Achievement_Description");

                entity.Property(e => e.AchievementFileName)
                    .HasMaxLength(50)
                    .HasColumnName("Achievement_FileName");

                entity.Property(e => e.AchievementName)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasColumnName("Achievement_Name");
            });

            modelBuilder.Entity<AchievementList>(entity =>
            {
                entity.Property(e => e.AchievementListId).HasColumnName("AchievementList_ID");

                entity.Property(e => e.AchievementId).HasColumnName("Achievement_ID");

                entity.Property(e => e.ProductId).HasColumnName("Product_ID");

                entity.HasOne(d => d.Achievement)
                    .WithMany(p => p.AchievementList)
                    .HasForeignKey(d => d.AchievementId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AchievementList_Achievement");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.AchievementList)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AchievementList_Product1");
            });

            modelBuilder.Entity<AdvertiseOrder>(entity =>
            {
                entity.HasKey(e => e.AdOrderId);

                entity.ToTable("Advertise_Order");

                entity.Property(e => e.AdOrderId).HasColumnName("Ad_Order_ID");

                entity.Property(e => e.PackageId).HasColumnName("Package_ID");

                entity.Property(e => e.SupplierId).HasColumnName("Supplier_ID");

                entity.HasOne(d => d.Package)
                    .WithMany(p => p.AdvertiseOrder)
                    .HasForeignKey(d => d.PackageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Advertise_Order_Advertise_Product");

                entity.HasOne(d => d.Supplier)
                    .WithMany(p => p.AdvertiseOrder)
                    .HasForeignKey(d => d.SupplierId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Advertise_Order_Supplier");
            });

            modelBuilder.Entity<AdvertiseProduct>(entity =>
            {
                entity.HasKey(e => e.PackageId);

                entity.ToTable("Advertise_Product");

                entity.Property(e => e.PackageId).HasColumnName("Package_ID");

                entity.Property(e => e.AdsDescription)
                    .HasColumnType("ntext")
                    .HasColumnName("Ads_Description");

                entity.Property(e => e.PackageName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Package_Name");
            });

            modelBuilder.Entity<AdvertiseProductDetail>(entity =>
            {
                entity.HasKey(e => e.PackageDetailId);

                entity.ToTable("Advertise_Product_Detail");

                entity.Property(e => e.PackageDetailId).HasColumnName("Package_Detail_ID");

                entity.Property(e => e.BeginTime)
                    .HasColumnType("date")
                    .HasColumnName("Begin_Time");

                entity.Property(e => e.EndTime)
                    .HasColumnType("date")
                    .HasColumnName("End_Time");

                entity.Property(e => e.OrderTime)
                    .HasColumnType("datetime")
                    .HasColumnName("Order_Time");

                entity.Property(e => e.PackageId).HasColumnName("Package_ID");

                entity.Property(e => e.ProductId).HasColumnName("Product_ID");

                entity.Property(e => e.UnitPrice)
                    .HasColumnType("money")
                    .HasColumnName("Unit_Price");

                entity.HasOne(d => d.Package)
                    .WithMany(p => p.AdvertiseProductDetail)
                    .HasForeignKey(d => d.PackageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Advertise_Product_Detail_Advertise_Product");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.AdvertiseProductDetail)
                    .HasForeignKey(d => d.ProductId)
                    .HasConstraintName("FK_Advertise_Product_Detail_Product");
            });

            modelBuilder.Entity<Age>(entity =>
            {
                entity.Property(e => e.AgeId)
                    .ValueGeneratedNever()
                    .HasColumnName("Age_ID");

                entity.Property(e => e.Grade).HasMaxLength(20);
            });

            modelBuilder.Entity<Bonus>(entity =>
            {
                entity.HasKey(e => e.PointsId);

                entity.Property(e => e.PointsId).HasColumnName("Points_ID");

                entity.Property(e => e.EndDate)
                    .HasColumnType("date")
                    .HasColumnName("End_Date");

                entity.Property(e => e.MemberId).HasColumnName("Member_ID");

                entity.Property(e => e.OrderId).HasColumnName("Order_ID");

                entity.HasOne(d => d.Member)
                    .WithMany(p => p.Bonus)
                    .HasForeignKey(d => d.MemberId)
                    .HasConstraintName("FK_Bonus_Customer_Infomation");

                entity.HasOne(d => d.Order)
                    .WithMany(p => p.Bonus)
                    .HasForeignKey(d => d.OrderId)
                    .HasConstraintName("FK_Bonus_Order");
            });

            modelBuilder.Entity<Categories>(entity =>
            {
                entity.HasKey(e => e.CategoryId);

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.CategoryDescription)
                    .HasMaxLength(50)
                    .HasColumnName("Category_Description");

                entity.Property(e => e.CategoryName)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("Category_Name");
            });

            modelBuilder.Entity<City>(entity =>
            {
                entity.Property(e => e.CityId)
                    .ValueGeneratedNever()
                    .HasColumnName("City_ID");

                entity.Property(e => e.CityName)
                    .HasMaxLength(50)
                    .HasColumnName("City_Name");

                entity.Property(e => e.RegionId).HasColumnName("Region_ID");

                entity.HasOne(d => d.Region)
                    .WithMany(p => p.City)
                    .HasForeignKey(d => d.RegionId)
                    .HasConstraintName("FK_City_Region");
            });

            modelBuilder.Entity<Comment>(entity =>
            {
                entity.Property(e => e.CommentId).HasColumnName("Comment_ID");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.MemberId).HasColumnName("Member_ID");

                entity.Property(e => e.OrderId).HasColumnName("Order_ID");

                entity.HasOne(d => d.Member)
                    .WithMany(p => p.Comment)
                    .HasForeignKey(d => d.MemberId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Comment_Customer_Infomation");

                entity.HasOne(d => d.Order)
                    .WithMany(p => p.Comment)
                    .HasForeignKey(d => d.OrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Comment_Order");
            });

            modelBuilder.Entity<CouponList>(entity =>
            {
                entity.HasKey(e => e.CouponId)
                    .HasName("PK_CouponList");

                entity.ToTable("Coupon_List");

                entity.Property(e => e.CouponId).HasColumnName("Coupon_ID");

                entity.Property(e => e.Description).HasMaxLength(50);

                entity.Property(e => e.Discount).HasColumnType("money");

                entity.Property(e => e.DueDate).HasColumnType("date");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.ProductId).HasColumnName("Product_ID");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.CouponList)
                    .HasForeignKey(d => d.ProductId)
                    .HasConstraintName("FK_Coupon_List_Product");
            });

            modelBuilder.Entity<CustomerInfomation>(entity =>
            {
                entity.HasKey(e => e.MemberId);

                entity.ToTable("Customer_Infomation");

                entity.Property(e => e.MemberId).HasColumnName("Member_ID");

                entity.Property(e => e.Address).HasMaxLength(50);

                entity.Property(e => e.AllergyDescription).IsUnicode(false);

                entity.Property(e => e.BirthDate)
                    .HasColumnType("date")
                    .HasColumnName("Birth_Date");

                entity.Property(e => e.DistrictId).HasColumnName("District_ID");

                entity.Property(e => e.Email)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Gender).HasMaxLength(4);

                entity.Property(e => e.IsAllergy).HasColumnName("IsAllergy?");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Nickname).HasMaxLength(30);

                entity.Property(e => e.Note).IsUnicode(false);

                entity.Property(e => e.ParentId).HasColumnName("ParentID");

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.PhoneNumber)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Phone_Number");

                entity.Property(e => e.RegistrationDay).HasColumnType("date");

                entity.Property(e => e.ResidentId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Resident_ID");

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.SuspensionReason).HasMaxLength(30);

                entity.HasOne(d => d.District)
                    .WithMany(p => p.CustomerInfomation)
                    .HasForeignKey(d => d.DistrictId)
                    .HasConstraintName("FK_Customer_Infomation_District");

                entity.HasOne(d => d.Parent)
                    .WithMany(p => p.InverseParent)
                    .HasForeignKey(d => d.ParentId)
                    .HasConstraintName("FK_Customer_Infomation_Customer_Infomation");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.CustomerInfomation)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("FK_Customer_Infomation_Status");
            });

            modelBuilder.Entity<District>(entity =>
            {
                entity.Property(e => e.DistrictId).HasColumnName("District_ID");

                entity.Property(e => e.CityId).HasColumnName("City_ID");

                entity.Property(e => e.DistrictName)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasColumnName("District_Name");

                entity.HasOne(d => d.City)
                    .WithMany(p => p.District)
                    .HasForeignKey(d => d.CityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_District_City");
            });

            modelBuilder.Entity<Ecpay>(entity =>
            {
                entity.HasKey(e => e.MerchantTradeNo)
                    .HasName("PK_EcpayOrders");

                entity.ToTable("ECPay");

                entity.Property(e => e.MerchantTradeNo).HasMaxLength(50);

                entity.Property(e => e.MemberId)
                    .HasMaxLength(50)
                    .HasColumnName("MemberID");

                entity.Property(e => e.PaymentDate).HasColumnType("datetime");

                entity.Property(e => e.PaymentType).HasMaxLength(50);

                entity.Property(e => e.PaymentTypeChargeFee).HasMaxLength(50);

                entity.Property(e => e.RtnMsg).HasMaxLength(50);

                entity.Property(e => e.TradeDate).HasMaxLength(50);

                entity.Property(e => e.TradeNo).HasMaxLength(50);
            });

            modelBuilder.Entity<ImageList>(entity =>
            {
                entity.HasKey(e => e.ImageId);

                entity.ToTable("Image_List");

                entity.Property(e => e.ImageId).HasColumnName("Image_ID");

                entity.Property(e => e.ProductId).HasColumnName("Product_ID");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.ImageList)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Image_List_Product");
            });

            modelBuilder.Entity<Interest>(entity =>
            {
                entity.Property(e => e.InterestId)
                    .ValueGeneratedNever()
                    .HasColumnName("Interest_ID");

                entity.Property(e => e.MemberId).HasColumnName("Member_ID");

                entity.Property(e => e.SubCategoryId).HasColumnName("SubCategory_ID");

                entity.HasOne(d => d.Member)
                    .WithMany(p => p.Interest)
                    .HasForeignKey(d => d.MemberId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Interest_Customer_Infomation");

                entity.HasOne(d => d.SubCategory)
                    .WithMany(p => p.Interest)
                    .HasForeignKey(d => d.SubCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Interest_SubCategory");
            });

            modelBuilder.Entity<IntervalList>(entity =>
            {
                entity.HasKey(e => e.IntervalId)
                    .HasName("PK__Table__EB97C1EE7D0DBB26");

                entity.ToTable("Interval_List");

                entity.Property(e => e.IntervalDescription).HasMaxLength(50);
            });

            modelBuilder.Entity<LoginLog>(entity =>
            {
                entity.HasKey(e => e.LoginId)
                    .HasName("PK_LoginLog");

                entity.ToTable("Login_Log");

                entity.Property(e => e.LoginId).HasColumnName("Login_ID");

                entity.Property(e => e.Device).HasMaxLength(20);

                entity.Property(e => e.LoginTime).HasColumnType("datetime");

                entity.Property(e => e.MemberId).HasColumnName("Member_ID");
            });

            modelBuilder.Entity<MemberAchievement>(entity =>
            {
                entity.Property(e => e.MemberAchievementId).HasColumnName("MemberAchievement_ID");

                entity.Property(e => e.AchievementId).HasColumnName("Achievement_ID");

                entity.Property(e => e.MemberId).HasColumnName("Member_ID");

                entity.HasOne(d => d.Achievement)
                    .WithMany(p => p.MemberAchievement)
                    .HasForeignKey(d => d.AchievementId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MemberAchievement_Achievement");

                entity.HasOne(d => d.Member)
                    .WithMany(p => p.MemberAchievement)
                    .HasForeignKey(d => d.MemberId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MemberAchievement_Customer_Infomation");
            });

            modelBuilder.Entity<MemberCoupon>(entity =>
            {
                entity.ToTable("Member_Coupon");

                entity.Property(e => e.MemberCouponId).HasColumnName("Member_Coupon_ID");

                entity.Property(e => e.CouponId).HasColumnName("Coupon_ID");

                entity.Property(e => e.MemberId).HasColumnName("Member_ID");

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.HasOne(d => d.Coupon)
                    .WithMany(p => p.MemberCoupon)
                    .HasForeignKey(d => d.CouponId)
                    .HasConstraintName("FK_Member_Coupon_Coupon_List");

                entity.HasOne(d => d.Member)
                    .WithMany(p => p.MemberCoupon)
                    .HasForeignKey(d => d.MemberId)
                    .HasConstraintName("FK_Member_Coupon_Customer_Infomation");
            });

            modelBuilder.Entity<Message>(entity =>
            {
                entity.Property(e => e.MessageId).HasColumnName("Message_ID");

                entity.Property(e => e.CustomerServiceId).HasColumnName("CustomerService_ID");

                entity.Property(e => e.Datetime).HasColumnType("datetime");

                entity.Property(e => e.MessageContent).HasColumnName("Message_Content");

                entity.Property(e => e.OrderId).HasColumnName("Order_ID");

                entity.HasOne(d => d.Order)
                    .WithMany(p => p.Message)
                    .HasForeignKey(d => d.OrderId)
                    .HasConstraintName("FK_Message_Order");
            });

            modelBuilder.Entity<Order>(entity =>
            {
                entity.Property(e => e.OrderId).HasColumnName("Order_ID");

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.BillingAmount)
                    .HasColumnType("money")
                    .HasColumnName("Billing_Amount");

                entity.Property(e => e.CouponId).HasColumnName("Coupon_ID");

                entity.Property(e => e.MemberId).HasColumnName("Member_ID");

                entity.Property(e => e.OrderTime)
                    .HasColumnType("datetime")
                    .HasColumnName("Order_Time");

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.TaxId)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("Tax_ID");

                entity.HasOne(d => d.Coupon)
                    .WithMany(p => p.Order)
                    .HasForeignKey(d => d.CouponId)
                    .HasConstraintName("FK_Order_Coupon_List");

                entity.HasOne(d => d.Member)
                    .WithMany(p => p.Order)
                    .HasForeignKey(d => d.MemberId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Order_Customer_Infomation");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.Order)
                    .HasForeignKey(d => d.StatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Order_Status");
            });

            modelBuilder.Entity<OrderDetail>(entity =>
            {
                entity.ToTable("Order_Detail");

                entity.Property(e => e.OrderDetailId).HasColumnName("Order_Detail_ID");

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.IsAttend).HasColumnName("isAttend?");

                entity.Property(e => e.MemberId).HasColumnName("Member_ID");

                entity.Property(e => e.OrderId).HasColumnName("Order_ID");

                entity.Property(e => e.ProductDetailId).HasColumnName("Product_Detail_ID");

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.HasOne(d => d.Member)
                    .WithMany(p => p.OrderDetail)
                    .HasForeignKey(d => d.MemberId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Order_Detail_Customer_Infomation");

                entity.HasOne(d => d.Order)
                    .WithMany(p => p.OrderDetail)
                    .HasForeignKey(d => d.OrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Order_Detail_Order");

                entity.HasOne(d => d.ProductDetail)
                    .WithMany(p => p.OrderDetail)
                    .HasForeignKey(d => d.ProductDetailId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Order_Detail_Product_Detail");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.OrderDetail)
                    .HasForeignKey(d => d.StatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Order_Detail_Status");
            });

            modelBuilder.Entity<PocketList>(entity =>
            {
                entity.ToTable("Pocket_List");

                entity.Property(e => e.PocketlistId).HasColumnName("Pocketlist_ID");

                entity.Property(e => e.MemberId).HasColumnName("Member_ID");

                entity.Property(e => e.ProductId).HasColumnName("Product_ID");

                entity.HasOne(d => d.Member)
                    .WithMany(p => p.PocketList)
                    .HasForeignKey(d => d.MemberId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PocketList_Customer_Infomation");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.PocketList)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PocketList_Product");
            });

            modelBuilder.Entity<Product>(entity =>
            {
                entity.Property(e => e.ProductId).HasColumnName("Product_ID");

                entity.Property(e => e.AgeId).HasColumnName("Age_ID");

                entity.Property(e => e.IsClass).HasColumnName("IsClass?");

                entity.Property(e => e.Note).HasColumnType("ntext");

                entity.Property(e => e.ProductIntro)
                    .HasColumnType("ntext")
                    .HasColumnName("Product_Intro");

                entity.Property(e => e.ProductName)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("Product_Name");

                entity.Property(e => e.ReleasedTime).HasColumnType("datetime");

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.SupplierId).HasColumnName("Supplier_ID");

                entity.HasOne(d => d.Age)
                    .WithMany(p => p.Product)
                    .HasForeignKey(d => d.AgeId)
                    .HasConstraintName("FK_Product_Age");

                entity.HasOne(d => d.Interval)
                    .WithMany(p => p.Product)
                    .HasForeignKey(d => d.IntervalId)
                    .HasConstraintName("FK_Product_Interval_List");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.Product)
                    .HasForeignKey(d => d.StatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Product_Status");

                entity.HasOne(d => d.Supplier)
                    .WithMany(p => p.Product)
                    .HasForeignKey(d => d.SupplierId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Product_Supplier");
            });

            modelBuilder.Entity<ProductCategories>(entity =>
            {
                entity.HasKey(e => e.ProductCategoryId);

                entity.Property(e => e.ProductCategoryId).HasColumnName("ProductCategory_ID");

                entity.Property(e => e.ProductId).HasColumnName("Product_ID");

                entity.Property(e => e.SubCategoryId).HasColumnName("SubCategory_ID");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.ProductCategories)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductCategories_Product");

                entity.HasOne(d => d.SubCategory)
                    .WithMany(p => p.ProductCategories)
                    .HasForeignKey(d => d.SubCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductCategories_SubCategory1");
            });

            modelBuilder.Entity<ProductDetail>(entity =>
            {
                entity.ToTable("Product_Detail");

                entity.Property(e => e.ProductDetailId).HasColumnName("Product_Detail_ID");

                entity.Property(e => e.Address).HasMaxLength(50);

                entity.Property(e => e.BeginTime)
                    .HasColumnType("datetime")
                    .HasColumnName("Begin_Time");

                entity.Property(e => e.ClassId).HasColumnName("ClassID");

                entity.Property(e => e.Dealine).HasColumnType("date");

                entity.Property(e => e.DistrictId).HasColumnName("District_ID");

                entity.Property(e => e.EndTime)
                    .HasColumnType("datetime")
                    .HasColumnName("End_Time");

                entity.Property(e => e.ProductId).HasColumnName("Product_ID");

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.UnitPrice).HasColumnType("money");

                entity.HasOne(d => d.Class)
                    .WithMany(p => p.InverseClass)
                    .HasForeignKey(d => d.ClassId)
                    .HasConstraintName("FK_Product_Detail_Product_Detail");

                entity.HasOne(d => d.District)
                    .WithMany(p => p.ProductDetail)
                    .HasForeignKey(d => d.DistrictId)
                    .HasConstraintName("FK_Product_Detail_District");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.ProductDetail)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Product_Detail_Product");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.ProductDetail)
                    .HasForeignKey(d => d.StatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Product_Detail_Status");
            });

            modelBuilder.Entity<Region>(entity =>
            {
                entity.Property(e => e.RegionId)
                    .ValueGeneratedNever()
                    .HasColumnName("Region_ID");

                entity.Property(e => e.RegionName)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasColumnName("Region_Name");
            });

            modelBuilder.Entity<Status>(entity =>
            {
                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.Description).HasMaxLength(10);

                entity.Property(e => e.StatusType)
                    .HasMaxLength(20)
                    .HasColumnName("Status_Type");
            });

            modelBuilder.Entity<SubCategory>(entity =>
            {
                entity.Property(e => e.SubCategoryId).HasColumnName("SubCategory_ID");

                entity.Property(e => e.AbilityOne)
                    .HasMaxLength(10)
                    .HasColumnName("Ability_One");

                entity.Property(e => e.AbilityThree)
                    .HasMaxLength(10)
                    .HasColumnName("Ability_Three");

                entity.Property(e => e.AbilityTwo)
                    .HasMaxLength(10)
                    .HasColumnName("Ability_Two");

                entity.Property(e => e.CategoryId).HasColumnName("Category_ID");

                entity.Property(e => e.SubCategoryDescription)
                    .HasMaxLength(50)
                    .HasColumnName("SubCategory_Description");

                entity.Property(e => e.SubCategoryName)
                    .HasMaxLength(10)
                    .HasColumnName("SubCategory_Name");

                entity.HasOne(d => d.Category)
                    .WithMany(p => p.SubCategory)
                    .HasForeignKey(d => d.CategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SubCategory_Categories");
            });

            modelBuilder.Entity<Supplier>(entity =>
            {
                entity.Property(e => e.SupplierId).HasColumnName("Supplier_ID");

                entity.Property(e => e.Address).HasMaxLength(50);

                entity.Property(e => e.CityId).HasColumnName("City_ID");

                entity.Property(e => e.ContactPerson)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("Contact_Person");

                entity.Property(e => e.Description).HasColumnType("ntext");

                entity.Property(e => e.Email)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Fax)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.LogoImage).HasColumnName("Logo_Image");

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.SupplierName)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("Supplier_Name");

                entity.Property(e => e.SupplierPhone)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Supplier_Phone");

                entity.Property(e => e.SupplierPhoto).HasColumnName("Supplier_Photo");

                entity.Property(e => e.TaxId)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("Tax_ID");

                entity.HasOne(d => d.City)
                    .WithMany(p => p.Supplier)
                    .HasForeignKey(d => d.CityId)
                    .HasConstraintName("FK_Supplier_City");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.Supplier)
                    .HasForeignKey(d => d.StatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Supplier_Status");
            });

            modelBuilder.Entity<Survey>(entity =>
            {
                entity.Property(e => e.SurveyId)
                    .ValueGeneratedNever()
                    .HasColumnName("Survey_ID");

                entity.Property(e => e.EnvironmentRank).HasColumnName("Environment_Rank");

                entity.Property(e => e.EnvironmentSuggestion)
                    .HasMaxLength(50)
                    .HasColumnName("Environment_Suggestion");

                entity.Property(e => e.GeneralRank).HasColumnName("General_Rank");

                entity.Property(e => e.GeneralSuggestion)
                    .HasMaxLength(50)
                    .HasColumnName("General_Suggestion");

                entity.Property(e => e.MemberId).HasColumnName("Member_ID");

                entity.Property(e => e.OrderDetailId).HasColumnName("Order_Detail_ID");

                entity.Property(e => e.Others).HasMaxLength(50);

                entity.Property(e => e.TeacherRank).HasColumnName("Teacher_Rank");

                entity.Property(e => e.TeacherSuggestion)
                    .HasMaxLength(50)
                    .HasColumnName("Teacher_Suggestion");

                entity.HasOne(d => d.Member)
                    .WithMany(p => p.Survey)
                    .HasForeignKey(d => d.MemberId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Survey_Customer_Infomation");

                entity.HasOne(d => d.OrderDetail)
                    .WithMany(p => p.Survey)
                    .HasForeignKey(d => d.OrderDetailId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Survey_Order_Detail");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}